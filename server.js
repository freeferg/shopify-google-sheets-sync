const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
require('dotenv').config();

const shopifyService = require('./services/shopifyService');
const googleSheetsService = require('./services/googleSheetsService');
const orderSyncService = require('./services/orderSyncService');
const sheetsWatcherService = require('./services/sheetsWatcherService');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json());

// Middleware sp√©cifique pour les webhooks Shopify (raw body)
app.use('/api/webhook', express.raw({type: 'application/json'}));

// Routes
app.get('/', (req, res) => {
  res.json({
    message: 'Shopify Google Sheets Sync API',
    version: '1.0.0',
    features: [
      'Synchronisation automatique des commandes Shopify vers Google Sheets',
      'Surveillance en temps r√©el de Google Sheets pour nouveaux noms',
      'Remplissage automatique des informations Shopify par nom de client',
      'Gestion chronologique des commandes multiples par client',
      'Mapping intelligent des articles selon notation sp√©cifique',
      'Validation de la structure du tableau Google Sheets'
    ],
    endpoints: {
      testConnection: 'GET /api/test-connection',
      getOrders: 'GET /api/orders?limit=10&status=any',
      syncOrders: 'POST /api/sync-orders',
      startWatching: 'POST /api/start-watching',
      stopWatching: 'POST /api/stop-watching',
      watchingStatus: 'GET /api/watching-status',
      analyzeCustomer: 'GET /api/analyze-customer/:customerName',
      webhookOrderCreated: 'POST /api/webhook/order-created'
    },
    examples: {
      syncRecentOrders: {
        method: 'POST',
        url: '/api/sync-orders',
        body: { "limit": 10 }
      },
      syncSpecificOrders: {
        method: 'POST',
        url: '/api/sync-orders',
        body: { "orderIds": ["#TCO10842", "#TCO10867"] }
      },
      analyzeCustomer: {
        method: 'GET',
        url: '/api/analyze-customer/Franck%20Cathus'
      },
      webhookOrderCreated: {
        method: 'POST',
        url: '/api/webhook/order-created',
        description: 'Webhook Shopify pour nouvelles commandes'
      },
      webhookOrderFulfilled: {
        method: 'POST',
        url: '/api/webhook/order-fulfilled',
        description: 'Webhook Shopify pour commandes exp√©di√©es (recommand√©)'
      }
    }
  });
});

// Test connection endpoint
app.get('/api/test-connection', async (req, res) => {
  try {
    const shopifyTest = await shopifyService.testConnection();
    const sheetsTest = await googleSheetsService.testConnection();
    
    res.json({
      success: true,
      shopify: shopifyTest,
      googleSheets: sheetsTest
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Get orders from Shopify
app.get('/api/orders', async (req, res) => {
  try {
    const { limit = 10, status = 'any' } = req.query;
    const orders = await shopifyService.getOrders(limit, status);
    res.json({
      success: true,
      data: orders
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Analyze customer orders
app.get('/api/analyze-customer/:customerName', async (req, res) => {
  try {
    const { customerName } = req.params;
    const analysis = await googleSheetsService.analyzeCustomerOrders(decodeURIComponent(customerName));
    
    res.json({
      success: true,
      data: analysis
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Start watching Google Sheets for new names
app.post('/api/start-watching', async (req, res) => {
  try {
    await sheetsWatcherService.startWatching();
    
    res.json({
      success: true,
      message: 'Surveillance Google Sheets d√©marr√©e',
      data: sheetsWatcherService.getStatus()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Stop watching Google Sheets
app.post('/api/stop-watching', async (req, res) => {
  try {
    await sheetsWatcherService.stopWatching();
    
    res.json({
      success: true,
      message: 'Surveillance Google Sheets arr√™t√©e',
      data: sheetsWatcherService.getStatus()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Get watching status
app.get('/api/watching-status', async (req, res) => {
  try {
    res.json({
      success: true,
      data: sheetsWatcherService.getStatus()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Debug endpoint to see what's in the sheets
app.get('/api/debug-sheets', async (req, res) => {
  try {
    const data = await googleSheetsService.getSheetData();
    
    const debug = {
      totalRows: data.length,
      header: data[0] || [],
      rows: []
    };
    
    // Get first 10 data rows with correct column mapping
    for (let i = 1; i < Math.min(11, data.length); i++) {
      const row = data[i];
      debug.rows.push({
        rowNumber: i + 1,
        columnA: row[0] || '',
        columnB: row[1] || '',
        columnC: row[2] || '',
        columnD_Name: row[3] || '',
        columnE: row[4] || '',
        columnF: row[5] || '',
        columnG_OrderNumber: row[6] || '',
        columnH_Tracking: row[7] || '',
        columnI: row[8] || '',
        columnJ: row[9] || '',
        columnK: row[10] || '',
        columnL_Items: row[11] || '',
        hasName: !!(row[3] && row[3].trim()),
        hasOrderNumber: !!(row[6] && row[6].trim()),
        hasTracking: !!(row[7] && row[7].trim()),
        hasItems: !!(row[11] && row[11].trim()),
        shouldProcess: !!(row[3] && row[3].trim() && (!row[6] || !row[7] || !row[11]))
      });
    }
    
    res.json({
      success: true,
      data: debug
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Webhook pour les nouvelles commandes Shopify
app.post('/api/webhook/order-created', async (req, res) => {
  try {
    console.log('üîÑ Webhook re√ßu: nouvelle commande cr√©√©e');
    
    // Parser le JSON du webhook
    const order = JSON.parse(req.body);
    
    console.log(`üì¶ Commande re√ßue: ${order.name || order.id}`);
    
    // V√©rifier si la commande a les codes promo requis
    if (!shopifyService.hasRequiredDiscountCodes(order)) {
      console.log(`‚è≠Ô∏è Commande ${order.name || order.id} ignor√©e: pas de code promo valide`);
      res.status(200).send('OK - Ignored (no valid discount code)');
      return;
    }
    
    // Synchroniser automatiquement la commande
    const syncResult = await orderSyncService.syncOrdersToSheets([order]);
    
    if (syncResult.successCount > 0) {
      console.log(`‚úÖ Commande ${order.name || order.id} synchronis√©e automatiquement`);
      res.status(200).send('OK');
    } else {
      console.error(`‚ùå √âchec de la synchronisation pour la commande ${order.name || order.id}`);
      res.status(500).send('Sync failed');
    }
  } catch (error) {
    console.error('‚ùå Erreur webhook:', error.message);
    res.status(500).send('Error');
  }
});

// Webhook pour les commandes exp√©di√©es (fulfillment)
app.post('/api/webhook/order-fulfilled', async (req, res) => {
  try {
    console.log('üöö Webhook re√ßu: commande exp√©di√©e');
    
    const fulfillment = JSON.parse(req.body);
    console.log(`üì¶ Commande exp√©di√©e: ${fulfillment.order_id}`);
    
    // R√©cup√©rer la commande compl√®te depuis Shopify
    const order = await shopifyService.getOrder(fulfillment.order_id);
    
    if (order) {
      // V√©rifier si la commande a les codes promo requis
      if (!shopifyService.hasRequiredDiscountCodes(order)) {
        console.log(`‚è≠Ô∏è Commande ${order.name || order.id} ignor√©e: pas de code promo valide`);
        res.status(200).send('OK - Ignored (no valid discount code)');
        return;
      }
      
      // Synchroniser la commande avec toutes les informations
      const syncResult = await orderSyncService.syncOrdersToSheets([order]);
      
      if (syncResult.successCount > 0) {
        console.log(`‚úÖ Commande ${order.name || order.id} synchronis√©e automatiquement apr√®s exp√©dition`);
        res.status(200).send('OK');
      } else {
        console.error(`‚ùå √âchec de la synchronisation pour la commande ${order.name || order.id}`);
        res.status(500).send('Sync failed');
      }
    } else {
      console.error(`‚ùå Commande ${fulfillment.order_id} non trouv√©e`);
      res.status(404).send('Order not found');
    }
  } catch (error) {
    console.error('‚ùå Erreur webhook fulfillment:', error.message);
    res.status(500).send('Error');
  }
});

// Webhook pour les mises √† jour de commandes
app.post('/api/webhook/order-updated', async (req, res) => {
  try {
    console.log('üîÑ Webhook re√ßu: commande mise √† jour');
    
    const order = JSON.parse(req.body);
    console.log(`üì¶ Commande mise √† jour: ${order.name || order.id}`);
    
    // V√©rifier si la commande a les codes promo requis
    if (!shopifyService.hasRequiredDiscountCodes(order)) {
      console.log(`‚è≠Ô∏è Commande ${order.name || order.id} ignor√©e: pas de code promo valide`);
      res.status(200).send('OK - Ignored (no valid discount code)');
      return;
    }
    
    // Synchroniser la commande mise √† jour
    const syncResult = await orderSyncService.syncOrdersToSheets([order]);
    
    if (syncResult.successCount > 0) {
      console.log(`‚úÖ Commande ${order.name || order.id} mise √† jour automatiquement`);
      res.status(200).send('OK');
    } else {
      console.error(`‚ùå √âchec de la mise √† jour pour la commande ${order.name || order.id}`);
      res.status(500).send('Update failed');
    }
  } catch (error) {
    console.error('‚ùå Erreur webhook update:', error.message);
    res.status(500).send('Error');
  }
});

// Sync orders to Google Sheets
app.post('/api/sync-orders', async (req, res) => {
  try {
    const { orderIds, limit = 10, status = 'any' } = req.body;
    
    let orders;
    if (orderIds && orderIds.length > 0) {
      // Sync specific orders
      orders = await shopifyService.getOrdersByIds(orderIds);
    } else {
      // Sync recent orders with optional status filter
      orders = await shopifyService.getOrders(limit, status);
    }
    
    const syncResults = await orderSyncService.syncOrdersToSheets(orders);
    
    res.json({
      success: true,
      message: `Synchronis√© ${syncResults.successCount} commandes avec succ√®s`,
      data: {
        total: syncResults.total,
        success: syncResults.successCount,
        failed: syncResults.failedCount,
        details: syncResults.details
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('Error:', error);
  res.status(500).json({
    success: false,
    error: 'Erreur interne du serveur'
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: 'Endpoint non trouv√©'
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
  console.log(`üìä Application Shopify-Google Sheets Sync`);
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log('');
  console.log('üìã Endpoints disponibles:');
  console.log(`  GET  /                    - Documentation API`);
  console.log(`  GET  /api/health          - V√©rification sant√©`);
  console.log(`  POST /api/sync-orders     - Synchroniser commandes`);
  console.log(`  POST /api/start-watching  - D√©marrer surveillance Google Sheets`);
  console.log(`  POST /api/stop-watching   - Arr√™ter surveillance Google Sheets`);
  console.log(`  GET  /api/watching-status - Statut surveillance`);
  console.log(`  POST /api/webhook/order-created   - Webhook nouvelle commande`);
  console.log(`  POST /api/webhook/order-updated   - Webhook commande mise √† jour`);
  console.log(`  POST /api/webhook/order-fulfilled - Webhook commande exp√©di√©e`);
  console.log(`  GET  /api/analyze-customer/:name  - Analyser commandes client`);
  console.log('');
  
  // D√©marrer automatiquement la surveillance Google Sheets
  console.log('üîç D√©marrage automatique de la surveillance Google Sheets...');
  sheetsWatcherService.startWatching().catch(error => {
    console.error('‚ùå Erreur lors du d√©marrage de la surveillance:', error.message);
  });
});
